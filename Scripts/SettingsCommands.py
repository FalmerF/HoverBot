import discord
from discord.ext import commands
import sqlite3
import Config
from datetime import datetime, timedelta
import os
import Utils
from Utils import EmbedCreate, ArgumentsEmbedCreate, AccessEmbedCreate

conn = sqlite3.connect(f"../Discord.db")
cursor = conn.cursor()

last_Messages = []


class SettingsCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def helpsettings(self, ctx, *args):
        embed_obj = discord.Embed(title="**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ø. –∫–æ–º–∞–Ω–¥–∞—Ö**", color=Config.embedCol)
        embed_obj.add_field(name="`!setmoderroles`", value=f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        embed_obj.add_field(name="`!pcreate`", value=f"–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        embed_obj.add_field(name="`!setnoxp`",
                            value=f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–ø—ã—Ç.")
        embed_obj.add_field(name="`!shopadd`", value=f"–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω.")
        embed_obj.add_field(name="`!shopdel`", value=f"–£–¥–∞–ª—è–µ—Ç —Ä–æ–ª—å —Å –º–∞–≥–∞–∑–∏–Ω–∞.")
        embed_obj.add_field(name="`!setxpm`", value=f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞.")
        embed_obj.add_field(name="`!setm`", value=f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")
        embed_obj.add_field(name="`!addchannelstat`", value=f"–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.")
        embed_obj.add_field(name="`–°–∫–æ—Ä–æ...`", value=f"-")
        embed_obj.set_footer(text=Utils.RequestedText(ctx.author))
        message = await ctx.send(embed=embed_obj)
        await ctx.message.delete()
        Utils.AddEventedMessage(ctx, message, 'help')

        await message.add_reaction(Config.cancel_reaction)

    @helpsettings.error
    async def helpsettings_error(self, ctx, error):
        if isinstance(error, commands.errors.MissingAnyRole) or isinstance(error, commands.errors.CheckFailure):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def settings(self, ctx, *args):
        cursor.execute(f"SELECT privateChannelId, noXpChanels, AdminRoles, ModerRoles, xpMultiplier FROM settings where guild={ctx.guild.id}")
        row = cursor.fetchone()
        embed_obj = discord.Embed(title="**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**", color=Config.embedCol)

        mentions_text = await Utils.get_mentions(row[3], ' ', '<@&id>')
        embed_obj.add_field(name="–†–æ–ª–∏ –ú–æ–¥–µ—Ä–∞—Ü–∏–∏", value=mentions_text)

        mentions_text = await Utils.get_mentions(row[1], ' ', '<#id>')
        embed_obj.add_field(name="No XP –∫–∞–Ω–∞–ª—ã", value=mentions_text)

        if row[0] is not None and row[0] != 0:
            embed_obj.add_field(name="–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª", value=f'<#{row[0]}>')

        embed_obj.add_field(name=f'–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞: `{row[4]}x`', value='-')
        embed_obj.set_footer(text=Utils.RequestedText(ctx.author))

        message = await ctx.send(embed=embed_obj)
        await ctx.message.delete()
        Utils.AddEventedMessage(ctx, message, 'help')

        await message.add_reaction(Config.cancel_reaction)

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setmoderroles(self, ctx, *roles: discord.Role):
        rolesId = ''
        for role in roles:
            rolesId += f'{role.id} '

        if len(roles) == 0:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!setmoderroles @roles`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
            return 0

        cursor.execute(f'UPDATE settings SET ModerRoles=? where guild=?', (rolesId, ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω.', color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)

        await ctx.message.delete()

    @setmoderroles.error
    async def setmoderroles_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
        else:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!setmoderroles @roles`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def pcreate(self, ctx, *args):
        cursor.execute(f"SELECT privateChannelId FROM settings where guild={ctx.guild.id}")
        channelId = cursor.fetchone()[0]
        if channelId != '' and channelId != 0:
            embed_obj = await EmbedCreate(description=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞.',
                                          color=Config.yellowCol,
                                          footerText=Utils.RequestedText(ctx.author))
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
            return

        categ = await ctx.guild.create_category("–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ")
        channel = await ctx.guild.create_voice_channel("üîíÔΩú–°–æ–∑–¥–∞—Ç—å", category=categ)
        cursor.execute(f'UPDATE settings SET privateChannelId=? where guild=?', (channel.id, ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∞.',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @pcreate.error
    async def pcreate_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setnoxp(self, ctx, *ids):
        no_xp_channels = ''
        for id in ids:
            no_xp_channels += f'{id} '

        cursor.execute(f'UPDATE settings SET noXpChanels=? where guild=?', (no_xp_channels, ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @setnoxp.error
    async def setnoxp_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setxpm(self, ctx, multiplier: float, *args):
        multiplier = max(min(multiplier, 10), 0.25)
        cursor.execute(f'UPDATE settings SET xpMultiplier=? where guild=?', (multiplier, ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ–ø—ã—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @setxpm.error
    async def setxpm_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
        else:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!setxpm <–º–Ω–æ–∂–∏—Ç–µ–ª—å (0.25 - 10)>`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def shopadd(self, ctx, role: discord.Role, sum: int, *args):
        if sum < 1:
            sum *= -1

        roles = [row[0] for row in cursor.execute(f"SELECT shopRoles FROM settings where guild={ctx.guild.id}")]
        roles[0] += f'{role.id} '
        costs = [row[0] for row in cursor.execute(f"SELECT shopRolesCost FROM settings where guild={ctx.guild.id}")]
        costs[0] += f'{sum} '

        cursor.execute(f'UPDATE settings SET shopRoles=? where guild=?',
                       (roles[0], ctx.guild.id))  # shopRoles shopRolesCost
        cursor.execute(f'UPDATE settings SET shopRolesCost=? where guild=?', (costs[0], ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–†–æ–ª—å <@&{role.id}> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {sum} :gem:',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @shopadd.error
    async def shopadd_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
        else:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!shopadd @role <—Å—É–º–º–∞>`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def shopdel(self, ctx, num: int, *args):
        num -= 1
        roles = [row[0] for row in cursor.execute(f"SELECT shopRoles FROM settings where guild={ctx.guild.id}")]
        rolesArray = roles[0].split(" ")
        del rolesArray[-1]
        del rolesArray[num]
        newRoles = ''
        for r in rolesArray:
            newRoles += f'{r} '

        costs = [row[0] for row in cursor.execute(f"SELECT shopRolesCost FROM settings where guild={ctx.guild.id}")]
        costsArray = costs[0].split(" ")
        del costsArray[-1]
        del costsArray[num]
        newCosts = ''
        for c in costsArray:
            newCosts += f'{c} '

        cursor.execute(f'UPDATE settings SET shopRoles=? where guild=?',
                       (newRoles, ctx.guild.id))  # shopRoles shopRolesCost
        cursor.execute(f'UPDATE settings SET shopRolesCost=? where guild=?', (newCosts, ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–†–æ–ª—å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º `{num + 1}` —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞.',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @shopdel.error
    async def shopdel_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
        else:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!shopadd <–Ω–æ–º–µ—Ä>`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def setm(self, ctx, count: int, *args):
        count = max(count, 0)
        cursor.execute(f'UPDATE settings SET maxMembers=? where guild=?', (count, ctx.guild.id))
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @setm.error
    async def setm_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
        else:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!setm <–º–Ω–æ–∂–∏—Ç–µ–ª—å (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)>`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def addchannelstat(self, ctx, typeStat: str, *args):
        if typeStat != 'members' and typeStat != 'online' and typeStat != 'voice' and typeStat != 'bots':
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!addchannelstat <members/online/voice/bots>`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
            return

        channel = await ctx.guild.create_voice_channel(await Utils.GetGuildStat(ctx.guild, typeStat))
        await channel.set_permissions(ctx.guild.default_role, connect=False)
        cursor.execute(f'INSERT INTO voice VALUES ({ctx.guild.id}, {channel.id}, "{typeStat}")')
        conn.commit()

        embed_obj = await EmbedCreate(description=f'–ö–∞–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω.',
                                      color=Config.blueCol,
                                      footerText=Utils.RequestedText(ctx.author))
        await ctx.send(embed=embed_obj)
        await ctx.message.delete()

    @addchannelstat.error
    async def addchannelstat_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            embed_obj = await AccessEmbedCreate(ctx)
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()
        else:
            embed_obj = await ArgumentsEmbedCreate(ctx, f'`!addchannelstat <members/online/voice/bots>`')
            await ctx.send(embed=embed_obj)
            await ctx.message.delete()


def setup(bot):
    bot.add_cog(SettingsCommands(bot))
